openapi: 3.0.3
info:
  title: Football Competition Management API
  description: API for managing football competitions, teams, and players.
  version: 1.0.0

servers:
  - url: https://api-football.com/rnt

paths:
  /competitions:
    get:
      summary: Get a list of competitions
      description: Retrieve a paginated list of competitions.
      parameters:
        - name: page
          in: query
          required: true
          schema:
            type: integer
            example: 1
        - name: pageSize
          in: query
          required: true
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: A paginated list of competitions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompetitionList'
    post:
      summary: Create a new competition
      description: Add a new competition to the list.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCompetition'
      responses:
        '201':
          description: Competition created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Competition'

  /teams:
    get:
      summary: Get a list of teams
      description: Retrieve a paginated list of teams, optionally filtered by team name.
      parameters:
        - name: page
          in: query
          required: true
          schema:
            type: integer
            example: 1
        - name: pageSize
          in: query
          required: true
          schema:
            type: integer
            example: 10
        - name: teamName
          in: query
          required: false
          schema:
            type: string
            example: Real Madrid
          description: Filter teams by name
      responses:
        '200':
          description: A paginated list of teams
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamList'
    post:
      summary: Create a new team
      description: Add a new team to the list.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTeam'
      responses:
        '201':
          description: Team created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'

  /players:
    post:
      summary: Create a new player
      description: Add a new player to the list.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPlayer'
      responses:
        '201':
          description: Player created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'

  /teams/{teamId}/competitions:
    post:
      summary: Associate a team with competitions
      description: Assign a list of competitions to a specific team.
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamCompetitions'
      responses:
        '200':
          description: Team competitions updated successfully

  /teams/{teamId}/players:
    get:
      summary: Get a list of players in a team
      description: Retrieve a paginated list of players in a team, optionally filtered by player name.
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          required: true
          schema:
            type: integer
            example: 1
        - name: pageSize
          in: query
          required: true
          schema:
            type: integer
            example: 10
        - name: playerName
          in: query
          required: false
          schema:
            type: string
            example: Lionel Messi
          description: Filter players by name
      responses:
        '200':
          description: A paginated list of players in the team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerList'

    post:
      summary: Add players to a team
      description: Associate a list of players with a specific team.
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamPlayers'
      responses:
        '200':
          description: Players added to the team successfully

components:
  schemas:
    Competition:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        location:
          type: string
      required:
        - id
        - name
        - location

    NewCompetition:
      type: object
      properties:
        name:
          type: string
        location:
          type: string
      required:
        - name
        - location

    CompetitionList:
      type: object
      properties:
        competitions:
          type: array
          items:
            $ref: '#/components/schemas/Competition'
        page:
          type: integer
        pageSize:
          type: integer
        total:
          type: integer

    Team:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        slogan:
          type: string
        competitions:
          type: array
          items:
            $ref: '#/components/schemas/Competition'
        players:
          type: array
          items:
            $ref: '#/components/schemas/Player'
      required:
        - id
        - name
        - slogan

    NewTeam:
      type: object
      properties:
        name:
          type: string
        slogan:
          type: string
      required:
        - name
        - slogan

    TeamList:
      type: object
      properties:
        teams:
          type: array
          items:
            $ref: '#/components/schemas/Team'
        page:
          type: integer
        pageSize:
          type: integer
        total:
          type: integer

    TeamCompetitions:
      type: object
      properties:
        competitions:
          type: array
          items:
            $ref: '#/components/schemas/Competition'
      required:
        - competitions

    Player:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        number:
          type: integer
        strongFoot:
          type: string
          enum:
            - Left
            - Right
      required:
        - id
        - name
        - number
        - strongFoot

    NewPlayer:
      type: object
      properties:
        name:
          type: string
        number:
          type: integer
        strongFoot:
          type: string
          enum:
            - Left
            - Right
      required:
        - name
        - number
        - strongFoot

    PlayerList:
      type: object
      properties:
        players:
          type: array
          items:
            $ref: '#/components/schemas/Player'
        page:
          type: integer
        pageSize:
          type: integer
        total:
          type: integer

    TeamPlayers:
      type: object
      properties:
        players:
          type: array
          items:
            $ref: '#/components/schemas/Player'
      required:
        - players
